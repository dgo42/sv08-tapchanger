#####################################################################
#  Homing definition
#####################################################################
[homing_override]
axes: yxz
set_position_z: 0
gcode:
  _INITIALIZE_FROM_DETECTED_TOOL
  {% if printer.probe.last_query  %}
    RESPOND TYPE=echo MSG='Z Probe triggered, cannot home.'
  {% else %}
    #SET_GCODE_OFFSET X=0.0 Y=0.0 Z=0.0
    {% set user = printer['gcode_macro _USER_VARIABLE'] %}
    {% set home_x, home_y, home_z = False, False, False %} ; define what axes need to be homed
    {% if params.X is not defined and params.Y is not defined and params.Z is not defined %} ; G28
      {% set home_x, home_y, home_z = True, True, True %}
    {% else %}
      {% if params.X is defined %}{% set home_x = True %}{% endif %}
      {% if params.Y is defined %}{% set home_y = True %}{% endif %}
      {% if params.Z is defined %}
        {% if 'x' not in printer.toolhead.homed_axes %}{% set home_x = True %}{% endif %} ; check if homed
        {% if 'y' not in printer.toolhead.homed_axes %}{% set home_y = True %}{% endif %} ; check if homed
        {% set home_z = True %}
      {% endif %}
    {% endif %}
    {% if user.hw.mag_probe.ena %} _MAG_PROBE ACTION=GET_STATUS RESPOND=0 {% endif %} ; generate probe state
    _SET_ACC VAL=HOME                                   ; reduce accel and accel_to_decel
    G0 Z{user.homing.z_endstop.hop} F{user.speed.z_hop} ; lift nozzle
    #G0 Z5 F{user.speed.z_hop} ; lift nozzle
    {% if home_y %} _SENSORLESS_HOME_Y {% endif %}                 ; home Y
    {% if home_x %} _SENSORLESS_HOME_X {% endif %}                 ; home X
    {% if home_z %} _HOME_Z            {% endif %}                 ; home Z
    _SET_ACC                                            ; set accel and accel_to_decel back to cfg value
    INITIALIZE_TOOLCHANGER                              ; Initialize tool changer
  {% endif %}

[gcode_macro _SENSORLESS_HOME_X]
gcode:
    {% set HOME_CUR = 0.700 %}
    {% set driver_config = printer.configfile.settings['tmc2209 stepper_x'] %}
    {% set RUN_CUR = driver_config.run_current %}
    #RESPOND TYPE=echo MSG='Sensorless homing X'
    # Set current for sensorless homing
    SET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CUR}
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CUR}
    # Pause to ensure driver stall flag is clear
    G4 P300
    # Home
    G28 X
    # Move away
    G91
    G1 X5 F9600
    G90
    # Set current during print
    SET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CUR}  
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CUR}  

[gcode_macro _SENSORLESS_HOME_Y]
gcode:
    {% set HOME_CUR = 0.700 %}
    {% set driver_config = printer.configfile.settings['tmc2209 stepper_y'] %}
    {% set RUN_CUR = driver_config.run_current %}
    #RESPOND TYPE=echo MSG='Sensorless homing Y'
    # Set current for sensorless homing
    SET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CUR}
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CUR}
    # Pause to ensure driver stall flag is clear
    #G4 P2000
    # Home
    G28 Y
    # Move away
    G91
    G1 Y-5 F9600
    G90
    # Set current during print
    SET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CUR}  
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CUR}  

[gcode_macro _HOME_Z]
description: Helper: z homing
variable_calibrate_z_next: False
gcode:
  {% set user = printer['gcode_macro _USER_VARIABLE'] %}
  ; use -10 as default to insure it error out in case the variable is not existing
  {% set z_endstop = user.homing.z_endstop|default({'x':-10,'y':-10,'z':0, 'hop':0}) %}
  {% if user.hw.mag_probe.ena %}
    {% set probe = printer['gcode_macro _MAG_PROBE'].state|default('unknown')|lower %} ; get probe state
    {% set error = "run \"_MAG_PROBE ACTION=GET_STATUS\"" if probe == 'unknown' 
              else "last dock or undock failed"           if probe == 'error'
              else "not valid"                            if probe is not in ['docked','attached']
              else "" %}
    {% if error|length > 0 %} 
      {action_raise_error("Home&Probe: MagProbe state %s %s" % (error,probe|upper))}
    {% endif %}
  {% endif %}
  {% if user.hw.mag_probe.ena and probe == 'docked' %}
    {action_respond_info("Home&Probe: Probe docked, attach probe first")}
    ATTACH_PROBE                                          ; detach probe
  {% endif %}
  _SET_Z_CURRENT VAL=HOME                                 ; reduce Z current
  G90                                                     ; absolute position
  G0 Y{z_endstop.y} F{user.speed.travel}   ; move to endstop position
  G0 X{z_endstop.x} Y{z_endstop.y} F{user.speed.travel}   ; move to endstop position
  G28 Z                                                   ; home Z
  G0 Z{z_endstop.z} F{user.speed.z_hop/3}                 ; lift toolhead to stop pressing on the pin
  {% if calibrate_z_next %}
    SET_GCODE_VARIABLE MACRO=_HOME_Z VARIABLE=calibrate_z_next VALUE=False
  {% else %}
    _SET_Z_CURRENT                                        ; set Z current back to cfg value
    #G0 Z{user.z_hop} F{user.speed.z_hop}                  ; lift toolhead
    G0 Z5 F{user.speed.z_hop}                  ; lift toolhead
    {% if user.hw.mag_probe.ena and probe == 'docked' %}
      {action_respond_info("Home&Probe: Probe was detached, detach probe last")}
      DETACH_PROBE                                          ; detach probe
    {% endif %}
  {% endif %}
  {% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %} ; set it back to relative

#####################################################################
#  Macros
#####################################################################
## conditional home
[gcode_macro _CG28]
description: Helper: Conditional homing
gcode:
  {% if "xyz" not in printer.toolhead.homed_axes %} G28 {% endif %}

; Depending on the selected tool at the time of homing, the physical Z endstop position is offset.
; This corrects for that using current tool offset.
[gcode_macro _ADJUST_Z_HOME_FOR_TOOL_OFFSET]
gcode:
      G90 ; absolute mode
      G0 Z10 F1000
      {% set tool = printer.toolchanger.tool %}
      {% if tool %}
         {% set tool_z_offset = printer[tool].gcode_z_offset %}
         {% set probe_z_offset = printer.tool_probe_endstop.active_tool_probe_z_offset %}
         SET_KINEMATIC_POSITION Z={10.0+tool_z_offset|float+probe_z_offset|float}
      {% endif %}

[gcode_macro _APPLY_ACTIVE_TOOL_GCODE_OFFSETS]
gcode:
    ; Apply gcode offsets
    {% set tool = printer.toolchanger.tool %}
    {% if tool %}
      SET_GCODE_OFFSET X={printer[tool].gcode_x_offset} Y={printer[tool].gcode_y_offset} Z={printer[tool].gcode_z_offset}
    {% endif %}

[gcode_macro _TAP_PROBE_ACTIVATE]
description: Ensure safe temp for bed probing
gcode:
    {% set max_temp = 150 %}
    {% set actual_temp = printer[params.HEATER].temperature %}
    {% set target_temp = printer[params.HEATER].target %}
    {% if target_temp > max_temp %}
        { action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (target_temp, max_temp)) }
        SET_HEATER_TEMPERATURE HEATER={params.HEATER} TARGET={ max_temp|int - 5 }
    {% endif %}
    # Temperature target is already low enough, but nozzle may still be too hot.
    {% if actual_temp > max_temp  + 2 %}
        { action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (actual_temp, max_temp)) }
        TEMPERATURE_WAIT SENSOR={params.HEATER} MAXIMUM={ max_temp }
    {% endif %}
    
[gcode_macro _SET_Z_CURRENT]
description: Helper: Set Z-drive motor current
variable_last_val: 'CONFIG'
gcode:
  {% set val = params.VAL|default('CONFIG') %}
  {% set z_run = printer['gcode_macro _USER_VARIABLE'].homing.z_current       if val == 'HOME'
            else printer.configfile.settings['tmc2209 stepper_z'].run_current if 'tmc2209 stepper_z' in printer.configfile.settings
            else printer.configfile.settings['tmc2660 stepper_z'].run_current if 'tmc2660 stepper_z' in printer.configfile.settings
            else printer.configfile.settings['tmc5160 stepper_z'].run_current if 'tmc5160 stepper_z' in printer.configfile.settings %}
  {% if val != last_val %}
    SET_GCODE_VARIABLE MACRO=_SET_Z_CURRENT VARIABLE=last_val VALUE='"{val}"'
    {% if params.RESPOND|default(printer['gcode_macro _USER_VARIABLE'].respond.z_current)|int == 1 %}
      {action_respond_info("Home&Probe: RunCur %.2fA rms" % z_run|float)}
    {% endif %}
    SET_TMC_CURRENT STEPPER=stepper_z  CURRENT={z_run}
    SET_TMC_CURRENT STEPPER=stepper_z1 CURRENT={z_run}
    SET_TMC_CURRENT STEPPER=stepper_z2 CURRENT={z_run}
    SET_TMC_CURRENT STEPPER=stepper_z3 CURRENT={z_run}
    M400
  {% endif %}

[gcode_macro _SET_ACC]
description: Helper: Set accel and accel_to_decel value
variable_last_val: 'CONFIG'
gcode:
  {% set val = params.VAL|default('CONFIG') %}
  {% set accel = printer['gcode_macro _USER_VARIABLE'].homing.accel  if val == 'HOME'
            else printer.configfile.settings.printer.max_accel %}
  {% set minimum_cruise_ratio = printer['gcode_macro _USER_VARIABLE'].homing.cruise_ratio|float if val == 'HOME'
                     else printer.configfile.settings.printer.minimum_cruise_ratio %}
  {% if val != last_val %}
    SET_GCODE_VARIABLE MACRO=_SET_ACC VARIABLE=last_val VALUE='"{val}"'
    {% if params.RESPOND|default(printer['gcode_macro _USER_VARIABLE'].respond.acc)|int == 1 %}
      {action_respond_info("Home&Probe: ACCEL: %d : MINIMUM_CRUISE_RATIO %d" % (accel|int, minimum_cruise_ratio|float))}
    {% endif %}
    SET_VELOCITY_LIMIT ACCEL={accel} MINIMUM_CRUISE_RATIO={minimum_cruise_ratio}
  {% endif %}

